Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/04/22 16:55:16
+Strings and Macros     (Proj6_murilali.asm		     Page 1 - 1


				TITLE Strings and Macros     (Proj6_murilali.asm)

				; Author: Aline Murillo
				; Last Modified: 4-December-2022
				; OSU email address: murilali@oregonstate.edu
				; Course number/section:   CS271 Section 403
				; Project Number: 6               Due Date: 4-December-2022
				; Description: Introduces and describes the program to the user. Prompts the
				;     user to enter 10 signed integers that are interpreted as strings. 
				;     Validates that the user's input starts with the characters +, -, or 
				;     integers; and that the following characters (if any) are also integers
				;     that produce an integer small enough to fit inside a 32-bit register.
				;     Displays a list of the 10 integers entered and the sum and truncated
				;     average of the numbers entered. Displays a goodbye message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; *****************************************************************************
				; Name: mGetString
				; 
				; Displays a prompt and gets the user's keyboard input into a memory location.
				;
				; Preconditions: prompt & enteredString are type BYTE. numOfBytesRead is DWORD.
				; Postconditions: all 8 32-bit general-purpose registers are restored.
				; Receives: 
				;     prompt = address of a prompt (to be displayed)
				;     enteredString = address of user's keyboard input (to be stored)
				;     numOfBytesRead = address of number of bytes read (to be stored)
				; Returns: prints a message to the console window and stores the user's input
				;     and number of bytes read into the specified memory locations.
				; *****************************************************************************
				mGetString MACRO prompt, enteredString, numOfBytesRead
					PUSHAD
					MOV		EDX, prompt
					CALL	WriteString
					MOV		EDX, enteredString
					MOV		ECX, STRINGSIZE             ; length of input string can accomodate
					CALL	ReadString
					MOV		EDI, numOfBytesRead
					MOV		[EDI], EAX
					POPAD
				ENDM

				; *****************************************************************************
				; Name: mDisplayString
				; 
				; Displays a string stored in a specified memory location.
				;
				; Preconditions: string is a BYTE string.
				; Postconditions: EDX restored.
				; Receives: 
				;     string = address of a string (to be displayed)
				; Returns: Prints a string to the console window.
				; *****************************************************************************
				mDisplayString MACRO string
					PUSH	EDX
					MOV		EDX, string
					CALL	WriteString
					POP		EDX
				ENDM

 = 0000000A				ARRAYSIZE = 10
 = 00000019				STRINGSIZE = 25			           ; buffer size for user's keyboard input
 = 00000020				BITS_IN_DWORD = 32

 00000000			.data
 00000000 57 65 6C 63 6F		greeting		BYTE	"Welcome to Strings and Macros by Aline Murillo!",13,10,13,10,0
	   6D 65 20 74 6F
	   20 53 74 72 69
	   6E 67 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 20
	   62 79 20 41 6C
	   69 6E 65 20 4D
	   75 72 69 6C 6C
	   6F 21 0D 0A 0D
	   0A 00
 00000034 54 68 69 73 20		instruction1	BYTE	"This program will:",13,10,"~ Ask you to enter ",0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 3A 0D 0A
	   7E 20 41 73 6B
	   20 79 6F 75 20
	   74 6F 20 65 6E
	   74 65 72 20 00
 0000005C 20 73 69 67 6E		instruction2	BYTE	" signed integers that can fit into a ",0
	   65 64 20 69 6E
	   74 65 67 65 72
	   73 20 74 68 61
	   74 20 63 61 6E
	   20 66 69 74 20
	   69 6E 74 6F 20
	   61 20 00
 00000082 2D 62 69 74 20		instruction3	BYTE	"-bit register.",13,10,"~ Display a list of integers entered.",13,10,
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 7E 20 44 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 69 6E 74 65
	   67 65 72 73 20
	   65 6E 74 65 72
	   65 64 2E 0D 0A
	   7E 20 44 69 73
	   70 6C 61 79 20
	   74 68 65 20 73
	   75 6D 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A 7E 20 44 69
	   73 70 6C 61 79
	   20 74 68 65 20
	   74 72 75 6E 63
	   61 74 65 64 20
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A 0D 0A 00
											"~ Display the sum of the integers.",13,10,
											"~ Display the truncated average of the integers.",13,10,13,10,0
 00000112 45 6E 74 65 72		promptUser		BYTE	"Enter a signed integer: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 0000012B C4 C4 C4 20 45		errorMsg		BYTE	196,196,196," ERROR: The number entered was not a valid integer ",
	   52 52 4F 52 3A
	   20 54 68 65 20
	   6E 75 6D 62 65
	   72 20 65 6E 74
	   65 72 65 64 20
	   77 61 73 20 6E
	   6F 74 20 61 20
	   76 61 6C 69 64
	   20 69 6E 74 65
	   67 65 72 20 6F
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 20
	   50 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 0D 0A 00
											"or was too big. Please try again.",13,10,0
 00000185 0D 0A 54 68 65		listMsg			BYTE	13,10,"The numbers you entered are:",13,10,0
	   20 6E 75 6D 62
	   65 72 73 20 79
	   6F 75 20 65 6E
	   74 65 72 65 64
	   20 61 72 65 3A
	   0D 0A 00
 000001A6 0D 0A 54 68 65		sumMsg			BYTE	13,10,"The sum of these numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 000001C6 0D 0A 54 68 65		avgMsg			BYTE	13,10,"The truncated average is: ",0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 69
	   73 3A 20 00
 000001E3 0D 0A 0D 0A 54		goodbye			BYTE	13,10,13,10,"Thanks for using Strings and Macros! Toodles!",13,10,0
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 53 74 72 69
	   6E 67 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 21
	   20 54 6F 6F 64
	   6C 65 73 21 0D
	   0A 00
 00000217 2C 20 00			comma			BYTE	", ",0
 0000021A  00000019 [			stringInput		BYTE	STRINGSIZE DUP(?)
	    00
	   ]
 00000233  00000019 [			convertedInt	BYTE	STRINGSIZE DUP(?)
	    00
	   ]
 0000024C 00000000			bytesRead		DWORD	?
 00000250 00000000			convertedString SDWORD	?
 00000254  0000000A [			intArray		SDWORD	ARRAYSIZE DUP(?)
	    00000000
	   ]


 00000000			.code
 00000000			main PROC

 00000000  6A 20			PUSH	BITS_IN_DWORD		
 00000002  6A 0A			PUSH	ARRAYSIZE			
 00000004  68 00000233 R		PUSH	OFFSET convertedInt	
 00000009  68 00000000 R		PUSH	OFFSET greeting		
 0000000E  68 00000034 R		PUSH	OFFSET instruction1	
 00000013  68 0000005C R		PUSH	OFFSET instruction2	
 00000018  68 00000082 R		PUSH	OFFSET instruction3	
 0000001D  E8 00000075			CALL	introduction

					; initialize counter and source register for loop
 00000022  B9 0000000A			MOV		ECX, ARRAYSIZE
 00000027  BE 00000254 R		MOV		ESI, OFFSET intArray
 0000002C			_fillArray: 
					; loop to fill an array
 0000002C  68 00000250 R		PUSH	OFFSET convertedString
 00000031  68 00000112 R		PUSH	OFFSET promptUser
 00000036  68 0000021A R		PUSH	OFFSET stringInput
 0000003B  68 0000024C R		PUSH	OFFSET bytesRead
 00000040  68 0000012B R		PUSH	OFFSET errorMsg
 00000045  56				PUSH	ESI
 00000046  E8 00000091			CALL	ReadVal
 0000004B  83 C6 04			ADD		ESI, 4
 0000004E  E2 DC			LOOP	_fillArray

 00000050  6A 0A			PUSH	ARRAYSIZE			
 00000052  68 00000254 R		PUSH	OFFSET intArray		
 00000057  68 00000233 R		PUSH	OFFSET convertedInt 
 0000005C  68 00000217 R		PUSH	OFFSET comma       
 00000061  68 00000185 R		PUSH	OFFSET listMsg     
 00000066  E8 0000018D			CALL	displayArray

 0000006B  6A 0A			PUSH	ARRAYSIZE			
 0000006D  68 00000254 R		PUSH	OFFSET intArray		
 00000072  68 00000233 R		PUSH	OFFSET convertedInt 
 00000077  68 000001C6 R		PUSH	OFFSET avgMsg		
 0000007C  68 000001A6 R		PUSH	OFFSET sumMsg		
 00000081  E8 000001A8			CALL	statisticsCalculator

 00000086  68 000001E3 R		PUSH	OFFSET goodbye
 0000008B  E8 000001E6			CALL	farewell

					Invoke ExitProcess,0	; exit to operating system
 00000090  6A 00	   *	    push   +000000000h
 00000092  E8 00000000 E   *	    call   ExitProcess
 00000097			main ENDP


				; *****************************************************************************
				; Name: introduction
				;
				; Displays a greeting and description to the user.
				;
				; Preconditions: the greeting, instructions, and convertedInt are BYTE strings.
				; Postconditions: None. EDX restored with mDisplayString macro.
				; Receives:
				;     [EBP+32] = BITS_IN_DWORD constant
				;     [EBP+28] = ARRAYSIZE constant
				;     [EBP+24] = address of convertedInt
				;     [EBP+20] = address of greeting
				;     [EBP+16] = address of instruction1
				;     [EBP+12] = address of instruction2
				;     [EBP+8] = address of instruction3
				; Returns: prints a greeting and description to the console window.
				; *****************************************************************************
 00000097			introduction PROC
 00000097  55				PUSH	EBP
 00000098  8B EC			MOV		EBP, ESP

					; displays the greeting and instruction1
					mDisplayString [EBP+20]   
 0000009A  52		     1		PUSH	EDX
 0000009B  8B 55 14	     1		MOV		EDX, [EBP+20]
 0000009E  E8 00000000 E     1		CALL	WriteString
 000000A3  5A		     1		POP		EDX
					mDisplayString [EBP+16]   
 000000A4  52		     1		PUSH	EDX
 000000A5  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000A8  E8 00000000 E     1		CALL	WriteString
 000000AD  5A		     1		POP		EDX

					; displays the number '10' = ARRAYSIZE
 000000AE  FF 75 1C			PUSH	[EBP+28]
 000000B1  FF 75 18			PUSH	[EBP+24]
 000000B4  E8 000000F6			CALL	writeVal

					; displays instruction2
					mDisplayString [EBP+12]  
 000000B9  52		     1		PUSH	EDX
 000000BA  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000BD  E8 00000000 E     1		CALL	WriteString
 000000C2  5A		     1		POP		EDX

					; displays the number '32' = BITS_IN_DWORD
 000000C3  FF 75 20			PUSH	[EBP+32]
 000000C6  FF 75 18			PUSH	[EBP+24]
 000000C9  E8 000000E1			CALL	writeVal

					; displays instruction3
					mDisplayString [EBP+8]  
 000000CE  52		     1		PUSH	EDX
 000000CF  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000D2  E8 00000000 E     1		CALL	WriteString
 000000D7  5A		     1		POP		EDX

 000000D8  5D				POP		EBP
 000000D9  C2 001C			RET		28
 000000DC			introduction ENDP


				; *****************************************************************************
				; Name: readVal
				;
				; Prompts the user to enter a signed integer small enough to bit in a 32-bit
				;     sized register that is entered as a string.
				; Converts the entered string into an integer and adds this value to intArray.
				;
				; Preconditions: promptUser, and errorMsg are BYTE strings; convertedString 
				;     is type SDWORD; bytesRead is type DWORD; and stringInput is a BYTE array.
				; Postconditions: all 8 32-bit general-purpose registers are restored.
				; Receives:
				;	  [EBP+28] = address of convertedString
				;     [EBP+24] = address of promptUser
				;     [EBP+20] = address of stringInput
				;     [EBP+16] = address of bytesRead
				;     [EBP+12] = address of errorMsg
				;     [EBP+8] = ESI (address of intArray)
				; Returns: retrieves an integer input by the user as a string, converts the
				;     string into an integer, and stores this integer into intArray.
				; *****************************************************************************
 000000DC			readVal PROC
					LOCAL	signBool:BYTE
 000000DC  55		   *	    push   ebp
 000000DD  8B EC	   *	    mov    ebp, esp
 000000DF  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000000E2  60				PUSHAD
					
					; -------------------------------------------------------------------------
					; Prompts the user to enter a signed integer. 
					; Initializes counter to number of bytes read and sets the source register
					; to the address of the user's input. 
				 	; -------------------------------------------------------------------------
 000000E3			_tryAgain:
					mGetString [EBP+24], [EBP+20], [EBP+16]	      ; "Enter a signed integer: "
 000000E3  60		     1		PUSHAD
 000000E4  8B 55 18	     1		MOV		EDX, [EBP+24]
 000000E7  E8 00000000 E     1		CALL	WriteString
 000000EC  8B 55 14	     1		MOV		EDX, [EBP+20]
 000000EF  B9 00000019	     1		MOV		ECX, STRINGSIZE             ; length of input string can accomodate
 000000F4  E8 00000000 E     1		CALL	ReadString
 000000F9  8B 7D 10	     1		MOV		EDI, [EBP+16]
 000000FC  89 07	     1		MOV		[EDI], EAX
 000000FE  61		     1		POPAD
 000000FF  C6 45 FF 00			MOV		signBool, 0
 00000103  8B 45 10			MOV		EAX, [EBP+16]	
 00000106  8B 08			MOV		ECX, [EAX]	         ; ECX = bytesRead
 00000108  33 C0			XOR		EAX, EAX
 0000010A  8B 75 14			MOV		ESI, [EBP+20]

					; -------------------------------------------------------------------------
					; Converts the string of ASCII digits to its numerical value representation
					; (SDWORD) and validates that the user's input is a valid number.
					; Uses the formula numInt = 10 * numInt + (numChar - 48)
					; -------------------------------------------------------------------------
 0000010D			_convertString:
					; 1st step in conversion process (10 * numInt) = EBX
 0000010D  BB 0000000A			MOV		EBX, 10
 00000112  F7 E3			MUL		EBX
 00000114  70 7C			JO		_error
 00000116  8B D8			MOV		EBX, EAX			 ; EBX = (10 * numInt)
					
					; resets EAX to load numChar into AL and determine if on first character
 00000118  33 C0			XOR		EAX, EAX
 0000011A  AC				LODSB
 0000011B  8B 55 10			MOV		EDX, [EBP+16]
 0000011E  3B 0A			CMP		ECX, [EDX]           ; if ECX = bytesRead, first pass through loop
 00000120  74 4C			JZ		_analyzeFirstChar

					; validates if the current character is an integer, 0 <= character <= 9
 00000122  3C 30			CMP		AL, 48				 ; 48 (ASCII) = 0 (decimal)
 00000124  7C 6C			JL		_error
 00000126  3C 39			CMP		AL, 57				 ; 57 (ASCII) = 9 (decimal)
 00000128  7F 68			JG		_error

 0000012A			_convertStringContinued:
					; determines if local variable signBool is set
 0000012A  80 7D FF 01			CMP		signBool, 1			
 0000012E  74 0B			JE		_convertStringNeg	

					; if local variable signBool is clear, perform data validation on (+) value
 00000130  83 E8 30			SUB		EAX, 48
 00000133  03 C3			ADD		EAX, EBX
 00000135  70 5B			JO		_error
 00000137  78 59			JS		_error
 00000139  EB 05			JMP		_determineEndLoop

 0000013B			_convertStringNeg:
					; if local variable signBool is set, perform 2nd step in conversion process
 0000013B  83 E8 30			SUB		EAX, 48					; (numChar - 48) = EAX
 0000013E  03 C3			ADD		EAX, EBX				; EBX (10 * numInt) + EAX = EAX

 00000140			_determineEndLoop:
					; determines if the loop should continue or terminate
 00000140  E2 CB			LOOP	_convertString

					; -------------------------------------------------------------------------
					; Determines if additional data validation should be performed if the 
					; original integer was negative. EAX holds the current converted integer.
					; -------------------------------------------------------------------------
 00000142  80 7D FF 01			CMP		signBool, 1
 00000146  75 0C			JNE		_determineIfStore

					; if the original integer is (-)
 00000148  83 F8 00			CMP		EAX, 0						
 0000014B  79 07			JNS		_determineIfStore			; if EAX is < 2^31, skip extra steps
 0000014D  70 43			JO		_error						; if EAX is > 2^31, raise error

					; if the current converted integer is already (-)
 0000014F  8B D8			MOV		EBX, EAX
 00000151  4B				DEC		EBX	
 00000152  78 3E			JS		_error			            ; raise error if EAX < -2^31 - 1

					; -------------------------------------------------------------------------
					; Store the converted string-to-integer into the variable convertedString.
					; Determine if the first character of the original string input is (-). 
					; If so, get the converted string-to-integer's two's complement.
					; -------------------------------------------------------------------------
 00000154			_determineIfStore:
 00000154  8B 55 1C			MOV		EDX, [EBP+28]
 00000157  89 02			MOV		[EDX], EAX			 ; store final integer into convertedString

					; checks if first character is (-)
 00000159  80 7D FF 01			CMP		signBool, 1
 0000015D  75 42			JNE		_addToArray			 ; if (+) integer, data validation completed
					
					; if the local variable signBool is set, perform extra data validation
 0000015F  8B 02			MOV		EAX, [EDX]
 00000161  83 F8 00			CMP		EAX, 0
 00000164  78 02			JS		_storeNeg
 00000166  F7 D8			NEG		EAX					 ; if current value (+), get 2's complement

 00000168			_storeNeg:
					; if current value is already (-), skip getting 2's complement
 00000168  70 28			JO		_error
 0000016A  89 02			MOV		[EDX], EAX			 ; store (-) final integer into convertedString
 0000016C  EB 33			JMP		_addToArray

					; -------------------------------------------------------------------------
					; Validates the first character in the entered string and raises an error
					;     if the user enters non-digits other than +, -, or 0 <= x <= 9.
					; -------------------------------------------------------------------------
 0000016E			_analyzeFirstChar:
					; determine if the first character is either +, -, or 0 <= integer <= 9
 0000016E  83 F9 14			CMP		ECX, 20			; if bytesRead > 18
 00000171  77 1F			JA		_error
 00000173  3C 2B			CMP		AL, 43			; +
 00000175  74 12			JE		_firstCharSign	
 00000177  3C 2D			CMP		AL, 45			; -
 00000179  74 0A			JE		_firstCharNeg 
 0000017B  3C 30			CMP		AL, 48			; 0
 0000017D  7C 13			JL		_error
 0000017F  3C 39			CMP		AL, 57			; 9
 00000181  7F 0F			JG		_error
 00000183  EB A5			JMP		_convertStringContinued

 00000185			_firstCharNeg:
					; sets signBool if the first character was found to be negative
 00000185  C6 45 FF 01			MOV		signBool, 1

 00000189			_firstCharSign:
					; checks if the stringInput is *only* the string +/-
 00000189  83 F9 01			CMP		ECX, 1
 0000018C  74 04			JE		_error

					; resets EAX so the first step (10 * numInt) = 0
 0000018E  33 C0			XOR		EAX, EAX
 00000190  EB AE			JMP		_determineEndLoop

 00000192			_error:
					; -------------------------------------------------------------------------
					; Displays an error message stating the user should try again. 
					; -------------------------------------------------------------------------
					mDisplayString [EBP+12]
 00000192  52		     1		PUSH	EDX
 00000193  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000196  E8 00000000 E     1		CALL	WriteString
 0000019B  5A		     1		POP		EDX
 0000019C  E9 FFFFFF42			JMP			_tryAgain

 000001A1			_addToArray:
					; -------------------------------------------------------------------------
					; Stores the converted string-to-integer value into the array intArray.
					; -------------------------------------------------------------------------
 000001A1  8B 75 1C			MOV		ESI, [EBP+28]
 000001A4  8B 06			MOV		EAX, [ESI]
 000001A6  8B 7D 08			MOV		EDI, [EBP+8]
 000001A9  AB				STOSD	

 000001AA  61				POPAD
 000001AB  C9		   *	    leave  
 000001AC  C2 0018			RET		24
 000001AF			readVal ENDP


				; *****************************************************************************
				; Name: writeVal
				;
				; Converts and displays a numeric SDWORD value into a string of ASCII digits. 
				;
				; Preconditions: the numeric value is type SDWORD; convertedInt is BYTE string.
				; Postconditions: all 8 32-bit general-purpose registers are restored.
				; Receives:
				;     [EBP+12] = value of numeric SDWORD value that is to be converted
				;     [EBP+8] = address of convertedInt
				; Returns: converts an integer into a string and prints the string to the 
				;     console window.
				; *****************************************************************************
 000001AF			writeVal PROC
					; saves registers and creates stack-frame pointer
 000001AF  55				PUSH	EBP
 000001B0  8B EC			MOV		EBP, ESP
 000001B2  60				PUSHAD

					; sets destination and accumulator register for procedure
 000001B3  8B 7D 08			MOV		EDI, [EBP+8]
 000001B6  8B 45 0C			MOV		EAX, [EBP+12]

					; determines if the value to be converted is negative
 000001B9  83 F8 00			CMP		EAX, 0
 000001BC  79 02			JNS		_skipNegation
 000001BE  F7 D8			NEG		EAX
					
 000001C0			_skipNegation:
					; initializes the dividend to 10
 000001C0  BB 0000000A			MOV		EBX, 10
 000001C5  33 C9			XOR		ECX, ECX

 000001C7			_pushValues:
					; divides the integer by 10 and pushes the remainder to the stack
 000001C7  33 D2			XOR		EDX, EDX
 000001C9  F7 F3			DIV		EBX
 000001CB  52				PUSH	EDX
 000001CC  41				INC		ECX
 000001CD  83 F8 00			CMP		EAX, 0
 000001D0  75 F5			JNZ		_pushValues

 000001D2			_checkSign:
					; pushes the (-) sign onto the stack if the original value was negative
 000001D2  8B 45 0C			MOV		EAX, [EBP+12]
 000001D5  83 F8 00			CMP		EAX, 0				 ; EAX = original integer value to be converted
 000001D8  79 03			JNS		_popValues
 000001DA  6A FD			PUSH	-3
 000001DC  41				INC		ECX

 000001DD			_popValues:
					; pops the remainders and adds 48 to get an integer-string character
 000001DD  5A				POP		EDX
 000001DE  83 C2 30			ADD		EDX, 48
 000001E1  8B C2			MOV		EAX, EDX
 000001E3  AA				STOSB							; stores the remainders into convertedInt
 000001E4  E2 F7			LOOP	_popValues
 000001E6  33 C0			XOR		EAX, EAX				
 000001E8  AA				STOSB							; add null terminator

					; displays string after the integer has been converted into a string
					mDisplayString [EBP+8]
 000001E9  52		     1		PUSH	EDX
 000001EA  8B 55 08	     1		MOV		EDX, [EBP+8]
 000001ED  E8 00000000 E     1		CALL	WriteString
 000001F2  5A		     1		POP		EDX

 000001F3  61				POPAD
 000001F4  5D				POP		EBP
 000001F5  C2 0008			RET		8
 000001F8			writeVal ENDP


				; *****************************************************************************
				; Name: displayArray
				;
				; Displays a title message to display a list of integers and iterates through
				;     the array intArray and displays each integer as a string.
				;
				; Preconditions: intArray is a type SDWORD; convertedInt, comma, and listMsg
				;     are BYTE strings.
				; Postconditions: all 8 32-bit general-purpose registers are restored.
				; Receives:
				;     [EBP+24] = ARRAYSIZE constant
				;     [EBP+20] = address of intArray
				;     [EBP+16] = address of convertedInt
				;     [EBP+12] = address of comma
				;     [EBP+8] = address of listMsg
				; Returns: prints a message stating "The numbers you entered are: " followed
				;     by the integers of intArray.
				; *****************************************************************************
 000001F8			displayArray PROC
 000001F8  55				PUSH	EBP
 000001F9  8B EC			MOV		EBP, ESP
 000001FB  60				PUSHAD

					; prints "The numbers you entered are: "
					mDisplayString [EBP+8]
 000001FC  52		     1		PUSH	EDX
 000001FD  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000200  E8 00000000 E     1		CALL	WriteString
 00000205  5A		     1		POP		EDX

					; initialize counter and source register for _displayLoop
 00000206  8B 4D 18			MOV		ECX, [EBP+24] 
 00000209  8B 75 14			MOV		ESI, [EBP+20]
					
 0000020C			_displayLoop:
					; iterates through intArray and prints each integer as strings
 0000020C  33 C0			XOR		EAX, EAX
 0000020E  AD				LODSD
 0000020F  50				PUSH	EAX
 00000210  FF 75 10			PUSH	[EBP+16]
 00000213  E8 FFFFFF97			CALL	writeVal

					; determine if end of array, if not, insert a ", " to separate the integers
 00000218  83 F9 01			CMP		ECX, 1
 0000021B  74 0C			JE		_return
					mDisplayString [EBP+12]
 0000021D  52		     1		PUSH	EDX
 0000021E  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000221  E8 00000000 E     1		CALL	WriteString
 00000226  5A		     1		POP		EDX
 00000227  E2 E3			LOOP	_displayLoop

 00000229			_return:
 00000229  61				POPAD
 0000022A  5D				POP		EBP
 0000022B  C2 0014			RET		20
 0000022E			displayArray ENDP


				; *****************************************************************************
				; Name: statisticsCalculator
				;
				; Calculates the sum and truncated average of someArray and displays the 
				;     sum and truncated average integers as strings. 
				;
				; Preconditions: intArray is type SDWORD; convertedInt, avgMsg, and sumMsg are
				;     BYTE strings.
				; Postconditions: all 8 32-bit general-purpose registers are restored.
				;     [EBP+24]: ARRAYSIZE constant
				;     [EBP+20]: address of intArray
				;     [EBP+16]: address of convertedInt
				;     [EBP+12]: address of avgMsg
				;     [EBP+8]: address of sumMsg
				; Returns: prints a message stating, "The sum of these numbers is: " followed
				;     by the sum of integers of intArray; and prints a message stating, "The
				;     truncated average is: " followed by the truncated average of intArray.
				; *****************************************************************************
 0000022E			statisticsCalculator PROC
 0000022E  55				PUSH	EBP
 0000022F  8B EC			MOV		EBP, ESP
 00000231  60				PUSHAD

					; initializes counter and source register to tabulate sum for _sumLoop
 00000232  8B 4D 18			MOV		ECX, [EBP+24]
 00000235  8B 75 14			MOV		ESI, [EBP+20]
 00000238  33 DB			XOR		EBX, EBX	         ; EBX = sum
					
 0000023A			_sumLoop:
					; iterates through intArray to calculate the sum
 0000023A  33 C0			XOR		EAX, EAX
 0000023C  AD				LODSD
 0000023D  03 D8			ADD		EBX, EAX
 0000023F  E2 F9			LOOP	_sumLoop

					; displays sum integer as string
					mDisplayString [EBP+8]
 00000241  52		     1		PUSH	EDX
 00000242  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000245  E8 00000000 E     1		CALL	WriteString
 0000024A  5A		     1		POP		EDX
 0000024B  53				PUSH	EBX
 0000024C  FF 75 10			PUSH	[EBP+16]
 0000024F  E8 FFFFFF5B			CALL	writeVal

					; calculates the truncated average of intArray
					mDisplayString [EBP+12]
 00000254  52		     1		PUSH	EDX
 00000255  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000258  E8 00000000 E     1		CALL	WriteString
 0000025D  5A		     1		POP		EDX
 0000025E  33 D2			XOR		EDX, EDX
 00000260  8B C3			MOV		EAX, EBX
 00000262  8B 5D 18			MOV		EBX, [EBP+24]
 00000265  99				CDQ
 00000266  F7 FB			IDIV	EBX
					
					; displays the truncated average integer as string
 00000268  50				PUSH	EAX                  ; EAX = quotient w/o remainder = truncated avg
 00000269  FF 75 10			PUSH	[EBP+16]
 0000026C  E8 FFFFFF3E			CALL	writeVal
					
 00000271  61				POPAD
 00000272  5D				POP		EBP
 00000273  C2 0014			RET		20
 00000276			statisticsCalculator ENDP


				; *****************************************************************************
				; Name: farewell
				; 
				; Displays a goodbye message to the user thanking them for using the program.
				;
				; Preconditions: goodbye is a BYTE string.
				; Postconditions: None. EDX restored with mDisplayString macro.
				; Receives: 
				;     [EBP+8] = address of goodbye
				; Returns: Prints a goodbye message to the console window.
				; *****************************************************************************
 00000276			farewell PROC
 00000276  55				PUSH	EBP
 00000277  8B EC			MOV		EBP, ESP
					mDisplayString [EBP+8]	     ; displays goodbye message
 00000279  52		     1		PUSH	EDX
 0000027A  8B 55 08	     1		MOV		EDX, [EBP+8]
 0000027D  E8 00000000 E     1		CALL	WriteString
 00000282  5A		     1		POP		EDX
 00000283  5D				POP		EBP
 00000284  C2 0004			RET		4
 00000287			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/04/22 16:55:16
+Strings and Macros     (Proj6_murilali.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000287 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 000001F8 _TEXT	Length= 00000036 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 0000020C _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000229 _TEXT	
farewell . . . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000011 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000097 _TEXT	Length= 00000045 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000097 Public STDCALL
  _fillArray . . . . . . . . . .	L Near	 0000002C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000DC _TEXT	Length= 000000D3 Public STDCALL
  signBool . . . . . . . . . . .	Byte	 bp - 00000001
  _tryAgain  . . . . . . . . . .	L Near	 000000E3 _TEXT	
  _convertString . . . . . . . .	L Near	 0000010D _TEXT	
  _convertStringContinued  . . .	L Near	 0000012A _TEXT	
  _convertStringNeg  . . . . . .	L Near	 0000013B _TEXT	
  _determineEndLoop  . . . . . .	L Near	 00000140 _TEXT	
  _determineIfStore  . . . . . .	L Near	 00000154 _TEXT	
  _storeNeg  . . . . . . . . . .	L Near	 00000168 _TEXT	
  _analyzeFirstChar  . . . . . .	L Near	 0000016E _TEXT	
  _firstCharNeg  . . . . . . . .	L Near	 00000185 _TEXT	
  _firstCharSign . . . . . . . .	L Near	 00000189 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000192 _TEXT	
  _addToArray  . . . . . . . . .	L Near	 000001A1 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
statisticsCalculator . . . . . .	P Near	 0000022E _TEXT	Length= 00000048 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 0000023A _TEXT	
writeVal . . . . . . . . . . . .	P Near	 000001AF _TEXT	Length= 00000049 Public STDCALL
  _skipNegation  . . . . . . . .	L Near	 000001C0 _TEXT	
  _pushValues  . . . . . . . . .	L Near	 000001C7 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000001D2 _TEXT	
  _popValues . . . . . . . . . .	L Near	 000001DD _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
BITS_IN_DWORD  . . . . . . . . .	Number	 00000020h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STRINGSIZE . . . . . . . . . . .	Number	 00000019h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgMsg . . . . . . . . . . . . .	Byte	 000001C6 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 0000024C _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000217 _DATA	
convertedInt . . . . . . . . . .	Byte	 00000233 _DATA	
convertedString  . . . . . . . .	DWord	 00000250 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 0000012B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000001E3 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
instruction1 . . . . . . . . . .	Byte	 00000034 _DATA	
instruction2 . . . . . . . . . .	Byte	 0000005C _DATA	
instruction3 . . . . . . . . . .	Byte	 00000082 _DATA	
intArray . . . . . . . . . . . .	DWord	 00000254 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMsg  . . . . . . . . . . . .	Byte	 00000185 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
promptUser . . . . . . . . . . .	Byte	 00000112 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringInput  . . . . . . . . . .	Byte	 0000021A _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 000001A6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
